apply plugin: 'application'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    implementation group: 'org.json', name: 'json', version: '20200518'
}

//define main class
mainClassName = 'Concentration'
def host =  'localhost'
def port = '8000'
def threadCount= '20'

task runTask1(type: JavaExec) {
    group 'server'
    description 'Given the Server.java: Creates Server socket waits for messages'

    classpath = sourceSets.main.runtimeClasspath

    main = 'taskone.Server'
    standardInput = System.in

    // run with arguments e.g.: gradle runServer -Pport=8000 -q --console=plain
    if (project.hasProperty('port')) {
        args(project.getProperty('port'))
    } else {
        args(port)
    }
}

task runTask2(type: JavaExec) {
    group 'server'
    description 'Unbounded Threaded Server socket that waits for messages'

    classpath = sourceSets.main.runtimeClasspath

    main = 'taskone.ThreadedServer'
    standardInput = System.in

    // run with arguments e.g.: gradle runServer -Pport=8000 -q --console=plain
    if (project.hasProperty('port')) {
        args(project.getProperty('port'))
    } else {
        args(port)
    }
}

task runTask3(type: JavaExec) {
    group 'server'
    description 'Bounded Thread Server socket that waits for messages'

    classpath = sourceSets.main.runtimeClasspath

    main = 'taskone.ThreadPoolServer'
    standardInput = System.in

    // run with arguments e.g.: gradle runServer -Pport=8000 -q --console=plain
    if (project.hasProperty("port") && project.hasProperty('threadsize')) {
        args(project.getProperty('port'), project.getProperty('threadsize'))
    } else {
        args(port,threadCount)
    }
}

task runClient(type: JavaExec) {
    group 'client'
    description 'Creates client socket sends a message to the server'

    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in

    main = 'taskone.Client'
    standardInput = System.in

    // run with arguments e.g.: gradle runClient -Phost=localhost -Pport=8000 -q --console=plain
    if (project.hasProperty("host") && project.hasProperty('port')) {
        args(project.getProperty('host'), project.getProperty('port'))
    } else {
        args(host, port)
    }
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
}
